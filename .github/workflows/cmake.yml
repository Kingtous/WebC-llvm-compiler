name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Installing LLVM 12
      run: sudo apt remove -y llvm-11* libclang-11* clang-11* && sudo apt install -y llvm-12-dev libclang-12-dev clang-12

    - name: Installing build-essential
      run: sudo apt install -y build-essential

    - name: Installing libedit
      run: sudo apt install -y libedit-dev

    - name: Installing libboost
      run: sudo apt install -y libboost-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-thread-dev libboost-regex-dev

    - name: Installing libgtkmm-3
      run: sudo apt install -y libgtk-3-dev libgtkmm-3.0-dev libgtksourceviewmm-3.0-dev

    - name: Installing mysql-connector-c++
      run: sudo apt install -y libmysqlcppconn-dev

    - name: Installing openssl
      run: sudo apt install -y openssl libssl-dev

    - name: Installing pkgconfig
      run: sudo apt install -y pkg-config

    - name: Installing ninja
      run: sudo apt install -y ninja-build

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G "Ninja"

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .

    - name: Test
      run: ${{github.workspace}}/build/webc_compiler -i ${{github.workspace}}/test/case/webc_test/qsort.webc -o output.o 
            && ${{github.workspace}}/build/output.o

#    - name: Create Release
#      id: create_release
#      if: startsWith(github.ref, 'refs/tags/')
#      uses: ncipollo/release-action@v1
#      with:
#        artifacts: "${{runner.workspace}}/build/webc_compiler,${{runner.workspace}}/build/module/json/libkjson.a,${{runner.workspace}}/build/module/sql/libksql.a,${{runner.workspace}}/build/module/string/libkstring.a,${{runner.workspace}}/build/module/time/libktime.a,${{runner.workspace}}/build/module/web/libkweb.a"
#        body: ${{ github.ref }}
#        token: ${{ secrets.GITHUB_TOKEN }}
